// /!\ This file is auto-generated by graphql-code-generator. Do not edit by hand.
// tslint:disable
// ...line above is mainly for IDE support, see webpack configs where this file is excluded

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field. */
  MongoID: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
  Date: Date;
  /** A pricing definition you give to a calculator or plan's feature. Actually a `JSON` object that must be compatible with the calculator's expectations. The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  BillingPricing: any;
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: { [key: string]: any };
  /** The `Metadata` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  Metadata: { [key: string]: any };
  /** Like Unit.Default in .NET: like a void, but it's a value */
  Success: 'success';
};

export type Query = {

  contactInformationFindById?: Maybe<ContactInformation>;
  contactInformationFindByIds?: Maybe<Array<ContactInformation>>;
  contactInformationFindOne?: Maybe<ContactInformation>;
  contactInformationFindMany?: Maybe<Array<ContactInformation>>;
  contactInformationConnection?: Maybe<ContactInformationConnection>;
  contactInformationPagination?: Maybe<ContactInformationPagination>;
  
};





export type QueryContactInformationFindByIdArgs = {
  _id: Scalars['MongoID'];
};


export type QueryContactInformationFindByIdsArgs = {
  _ids: Array<Maybe<Scalars['MongoID']>>;
  limit?: Maybe<Scalars['Int']>;
  sort?: Maybe<SortFindByIdsContactInformationInput>;
};


export type QueryContactInformationFindOneArgs = {
  filter?: Maybe<FilterFindOneContactInformationInput>;
  skip?: Maybe<Scalars['Int']>;
  sort?: Maybe<SortFindOneContactInformationInput>;
};


export type QueryContactInformationFindManyArgs = {
  filter?: Maybe<FilterFindManyContactInformationInput>;
  skip?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  sort?: Maybe<SortFindManyContactInformationInput>;
};


export type QueryContactInformationConnectionArgs = {
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  last?: Maybe<Scalars['Int']>;
  before?: Maybe<Scalars['String']>;
  filter?: Maybe<FilterFindManyContactInformationInput>;
  sort?: Maybe<SortConnectionContactInformationEnum>;
};


export type QueryContactInformationPaginationArgs = {
  page?: Maybe<Scalars['Int']>;
  perPage?: Maybe<Scalars['Int']>;
  filter?: Maybe<FilterFindManyContactInformationInput>;
  sort?: Maybe<SortFindManyContactInformationInput>;
};



export enum SortFindByIdsContactInformationInput {
  IdAsc = '_ID_ASC',
  IdDesc = '_ID_DESC'
}

export type FilterFindOneContactInformationInput = {
  fullname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  captcha?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['MongoID']>;
  _ids?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  /** List of *indexed* fields that can be filtered via operators. */
  _operators?: Maybe<OperatorsFilterFindOneContactInformationInput>;
  OR?: Maybe<Array<FilterFindOneContactInformationInput>>;
  AND?: Maybe<Array<FilterFindOneContactInformationInput>>;
};

/** For performance reason this type contains only *indexed* fields. */
export type OperatorsFilterFindOneContactInformationInput = {
  _id?: Maybe<_IdOperatorsFilterFindOneContactInformationInput>;
};

export type _IdOperatorsFilterFindOneContactInformationInput = {
  gt?: Maybe<Scalars['MongoID']>;
  gte?: Maybe<Scalars['MongoID']>;
  lt?: Maybe<Scalars['MongoID']>;
  lte?: Maybe<Scalars['MongoID']>;
  ne?: Maybe<Scalars['MongoID']>;
  in?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  nin?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
};

export enum SortFindOneContactInformationInput {
  IdAsc = '_ID_ASC',
  IdDesc = '_ID_DESC'
}

export type FilterFindManyContactInformationInput = {
  fullname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  captcha?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['MongoID']>;
  _ids?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  /** List of *indexed* fields that can be filtered via operators. */
  _operators?: Maybe<OperatorsFilterFindManyContactInformationInput>;
  OR?: Maybe<Array<FilterFindManyContactInformationInput>>;
  AND?: Maybe<Array<FilterFindManyContactInformationInput>>;
};

/** For performance reason this type contains only *indexed* fields. */
export type OperatorsFilterFindManyContactInformationInput = {
  _id?: Maybe<_IdOperatorsFilterFindManyContactInformationInput>;
};

export type _IdOperatorsFilterFindManyContactInformationInput = {
  gt?: Maybe<Scalars['MongoID']>;
  gte?: Maybe<Scalars['MongoID']>;
  lt?: Maybe<Scalars['MongoID']>;
  lte?: Maybe<Scalars['MongoID']>;
  ne?: Maybe<Scalars['MongoID']>;
  in?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  nin?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
};

export enum SortFindManyContactInformationInput {
  IdAsc = '_ID_ASC',
  IdDesc = '_ID_DESC'
}

/** A connection to a list of items. */
export type ContactInformationConnection = {
  __typename?: 'ContactInformationConnection';
  /** Total object count. */
  count: Scalars['Int'];
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** Information to aid in pagination. */
  edges: Array<ContactInformationEdge>;
};

/** An edge in a connection. */
export type ContactInformationEdge = {
  __typename?: 'ContactInformationEdge';
  /** The item at the end of the edge */
  node: ContactInformation;
  /** A cursor for use in pagination */
  cursor: Scalars['String'];
};

export enum SortConnectionContactInformationEnum {
  IdDesc = '_ID_DESC',
  IdAsc = '_ID_ASC'
}

/** List of items with pagination. */
export type ContactInformationPagination = {
  __typename?: 'ContactInformationPagination';
  /** Total object count. */
  count?: Maybe<Scalars['Int']>;
  /** Array of objects. */
  items?: Maybe<Array<ContactInformation>>;
  /** Information to aid in pagination. */
  pageInfo: PaginationInfo;
};


export type Mutation = {
  
  /** Create one document with mongoose defaults, setters, hooks and validation */
  contactInformationCreateOne?: Maybe<CreateOneContactInformationPayload>;
  /** Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it. */
  contactInformationUpdateById?: Maybe<UpdateByIdContactInformationPayload>;
  /** Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it. */
  contactInformationUpdateOne?: Maybe<UpdateOneContactInformationPayload>;
  /** Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document. */
  contactInformationRemoveById?: Maybe<RemoveByIdContactInformationPayload>;
  /** Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document. */
  contactInformationRemoveOne?: Maybe<RemoveOneContactInformationPayload>;



export type MutationContactInformationCreateOneArgs = {
  record: CreateOneContactInformationInput;
};


export type MutationContactInformationUpdateByIdArgs = {
  record: UpdateByIdContactInformationInput;
};


export type MutationContactInformationUpdateOneArgs = {
  record: UpdateOneContactInformationInput;
  filter?: Maybe<FilterUpdateOneContactInformationInput>;
  sort?: Maybe<SortUpdateOneContactInformationInput>;
  skip?: Maybe<Scalars['Int']>;
};


export type MutationContactInformationRemoveByIdArgs = {
  _id: Scalars['MongoID'];
};


export type MutationContactInformationRemoveOneArgs = {
  filter?: Maybe<FilterRemoveOneContactInformationInput>;
  sort?: Maybe<SortRemoveOneContactInformationInput>;
};



export type CreateOneContactInformationPayload = {
  __typename?: 'CreateOneContactInformationPayload';
  /** Created document ID */
  recordId?: Maybe<Scalars['MongoID']>;
  /** Created document */
  record?: Maybe<ContactInformation>;
};

export type CreateOneContactInformationInput = {
  fullname: Scalars['String'];
  email: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  message: Scalars['String'];
  captcha: Scalars['String'];
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
};

export type UpdateByIdContactInformationPayload = {
  __typename?: 'UpdateByIdContactInformationPayload';
  /** Updated document ID */
  recordId?: Maybe<Scalars['MongoID']>;
  /** Updated document */
  record?: Maybe<ContactInformation>;
};

export type UpdateByIdContactInformationInput = {
  fullname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  captcha?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  _id: Scalars['MongoID'];
};

export type UpdateOneContactInformationPayload = {
  __typename?: 'UpdateOneContactInformationPayload';
  /** Updated document ID */
  recordId?: Maybe<Scalars['MongoID']>;
  /** Updated document */
  record?: Maybe<ContactInformation>;
};

export type UpdateOneContactInformationInput = {
  fullname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  captcha?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
};

export type FilterUpdateOneContactInformationInput = {
  fullname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  captcha?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['MongoID']>;
  _ids?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  /** List of *indexed* fields that can be filtered via operators. */
  _operators?: Maybe<OperatorsFilterUpdateOneContactInformationInput>;
  OR?: Maybe<Array<FilterUpdateOneContactInformationInput>>;
  AND?: Maybe<Array<FilterUpdateOneContactInformationInput>>;
};

/** For performance reason this type contains only *indexed* fields. */
export type OperatorsFilterUpdateOneContactInformationInput = {
  _id?: Maybe<_IdOperatorsFilterUpdateOneContactInformationInput>;
};

export type _IdOperatorsFilterUpdateOneContactInformationInput = {
  gt?: Maybe<Scalars['MongoID']>;
  gte?: Maybe<Scalars['MongoID']>;
  lt?: Maybe<Scalars['MongoID']>;
  lte?: Maybe<Scalars['MongoID']>;
  ne?: Maybe<Scalars['MongoID']>;
  in?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  nin?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
};

export enum SortUpdateOneContactInformationInput {
  IdAsc = '_ID_ASC',
  IdDesc = '_ID_DESC'
}

export type RemoveByIdContactInformationPayload = {
  __typename?: 'RemoveByIdContactInformationPayload';
  /** Removed document ID */
  recordId?: Maybe<Scalars['MongoID']>;
  /** Removed document */
  record?: Maybe<ContactInformation>;
};

export type RemoveOneContactInformationPayload = {
  __typename?: 'RemoveOneContactInformationPayload';
  /** Removed document ID */
  recordId?: Maybe<Scalars['MongoID']>;
  /** Removed document */
  record?: Maybe<ContactInformation>;
};

export type FilterRemoveOneContactInformationInput = {
  fullname?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  captcha?: Maybe<Scalars['String']>;
  statut?: Maybe<Scalars['String']>;
  interlocutor?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['String']>;
  _id?: Maybe<Scalars['MongoID']>;
  _ids?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  /** List of *indexed* fields that can be filtered via operators. */
  _operators?: Maybe<OperatorsFilterRemoveOneContactInformationInput>;
  OR?: Maybe<Array<FilterRemoveOneContactInformationInput>>;
  AND?: Maybe<Array<FilterRemoveOneContactInformationInput>>;
};

/** For performance reason this type contains only *indexed* fields. */
export type OperatorsFilterRemoveOneContactInformationInput = {
  _id?: Maybe<_IdOperatorsFilterRemoveOneContactInformationInput>;
};

export type _IdOperatorsFilterRemoveOneContactInformationInput = {
  gt?: Maybe<Scalars['MongoID']>;
  gte?: Maybe<Scalars['MongoID']>;
  lt?: Maybe<Scalars['MongoID']>;
  lte?: Maybe<Scalars['MongoID']>;
  ne?: Maybe<Scalars['MongoID']>;
  in?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
  nin?: Maybe<Array<Maybe<Scalars['MongoID']>>>;
};

export enum SortRemoveOneContactInformationInput {
  IdAsc = '_ID_ASC',
  IdDesc = '_ID_DESC'
}



